# **Actividad de Clase 2 â€“ Pruebas de IntegraciÃ³n con Limpieza y Reportes PDF**


## ğŸ§ª DescripciÃ³n general

Esta actividad extiende el ejemplo de pruebas de integraciÃ³n trabajado en clase, implementando:

1. Limpieza de los datos creados durante la ejecuciÃ³n de las pruebas (sin afectar otros datos).
2. GeneraciÃ³n automÃ¡tica de reportes PDF con los resultados de cada ejecuciÃ³n.
3. InclusiÃ³n de pruebas fallidas de forma controlada para validar el reporte.

---

## ğŸ§± Estructura del sistema

- `Users_Service/main.py`: Servicio Flask que gestiona usuarios.
- `Task_Service/main.py`: Servicio Flask que gestiona tareas asociadas a usuarios.
- `Front-End/main.py`: Servicio Flask que ofrece la interfaz grÃ¡fica.
- `Test/BackEnd-Test.py`: Test de integraciÃ³n de backend.
- `Test/Frontend_Test.py`: Test de extremo a extremo del frontend con Selenium.
- `reports/`: Almacena los reportes PDF generados por los tests.

---

## âœ… Cambios realizados

### ğŸ”§ Backend (servicios)

#### `Users_Service/main.py`
- Se agregÃ³ un endpoint `DELETE /users/<id>` para permitir la eliminaciÃ³n de usuarios creados durante pruebas.

#### `Task_Service/main.py`
- Se agregÃ³ un endpoint `DELETE /tasks/<id>` para permitir la eliminaciÃ³n de tareas creadas durante pruebas.

### ğŸ§ª Tests

#### `Test/BackEnd-Test.py`
- Se aÃ±adiÃ³ limpieza automÃ¡tica de la tarea y usuario creados durante el test.
- Se validÃ³ que los datos fueran correctamente eliminados.
- Se implementÃ³ la generaciÃ³n de un PDF automÃ¡tico con numeraciÃ³n (`backend_report_#.pdf`).
- Se aÃ±adiÃ³ intencionalmente un test fallido (verificaciÃ³n de cantidad de tareas) para comprobar la apariciÃ³n de errores en el reporte.

#### `Test/Frontend_Test.py`
- Se utilizÃ³ Selenium para automatizar la creaciÃ³n de usuario, tarea y consulta desde la interfaz web.
- Se limpiÃ³ automÃ¡ticamente el usuario y tarea creados desde el backend.
- Se verificÃ³ que los datos hubieran sido eliminados correctamente.
- Se generÃ³ un PDF de resultados numerado (`frontend_report_#.pdf`).
- Se incluyÃ³ intencionalmente una aserciÃ³n fallida para simular un error controlado.

---

## ğŸ“‚ Archivos modificados o aÃ±adidos

| Archivo              | ModificaciÃ³n                                                |
|----------------------|-------------------------------------------------------------|
| `Users_Service/main.py`       | Agregado endpoint DELETE `/users/<id>`                      |
| `Task_Service/main.py`       | Agregado endpoint DELETE `/tasks/<id>`                      |
| `Test/BackEnd-Test.py`| Limpieza, verificaciÃ³n, PDF y test fallido                  |
| `Test/Frontend_Test.py`   | Limpieza, verificaciÃ³n, PDF y test fallido                  |
| `reports/`           | Carpeta creada automÃ¡ticamente para almacenar los reportes  |
| `README.md`          | Este archivo                                                 |

---
## **Inicio RÃ¡pido**

### 1. ğŸ“¦ Instalar dependencias

`pip install flask flask_sqlalchemy flask_cors requests fpdf selenium`

### 2. ğŸš€ Ejecutar los servicios

```
# Terminal 1 - Users_Service (puerto 5001)
python main.py

# Terminal 2 -Task_Service (puerto 5002)
python main.py

# Terminal 3 - Front-End (puerto 5000)
python main.py
```
### 3. ğŸ§ª Ejecutar pruebas

### **Test de backend:** 

`BackEnd-Test.py`

### **Test de frontend**

`FrontEnd-Test.py`


### 4. ğŸ“„ Ver resultados

```
reports/backend_report_1.pdf
reports/frontend_report_1.pdf
```


